@model MvcMusicPlayer.Models.SongViewModel
@{
    ViewBag.Title = "Player";
}

@if (Model != null)
{
    <div class="container-music-player">
        <div class="player">
            <div class="like waves-effect waves-light">
                <i class="icon-heart"></i>
            </div>
            <div class="mask"></div>
            <ul class="player-info info-one">
                <li>@Model.CurrentlyPlayingSong.SongName</li>
                <li>@string.Join(", ", Model.CurrentlyPlayingSong.Singers)</li>
                <li>@Model.CurrentlyPlayingSong.GetDurationString()</li>
            </ul>
            <ul class="player-info info-two">
                <li>@Model.CurrentlyPlayingSong.SongName</li>
                <li>@string.Join(", ", Model.CurrentlyPlayingSong.Singers)</li>
                <li><span id="duration"></span><i> / </i>@Model.CurrentlyPlayingSong.GetDurationString()</li>
            </ul>
            <div id="play-button" class="unchecked">
                <i class="icon icon-play"></i>
            </div>
            <div class="control-row">
                <div class="waves-animation-one"></div>
                <div class="waves-animation-two"></div>
                <div id="pause-button">
                    <i class="icon"></i>
                </div>
                <div class="seek-field">
                    <input id="audioSeekBar" min="0" max="@Model.CurrentlyPlayingSong.Duration" step="1" value="0" type="range" oninput="audioSeekBar()" onchange="this.oninput()">
                </div>
                <div class="volume-icon">
                    <i class="icon-volume-up"></i>
                </div>
                <div class="volume-field">
                    <input id="volumeSeekBar" type="range" min="0" max="100" value="100" step="1" oninput="audio.volume = this.value/100" onchange="this.oninput()">
                </div>
            </div>
            <div class="list-group">
                <a href="#" class="list-group-item list-group-item-action active">
                    <strong>Other Available songs</strong>
                </a>
            </div>
            <div class="list-group">
                @foreach (var song in Model.OtherAvailableSongs)
                {
                    <a href="@Url.Action("Index","Music",new { id=song.SongId})" data-song-id="@song.SongId" class="js-available-song-list list-group-item list-group-item-action @(song.SongId==Model.CurrentlyPlayingSong.SongId ? "active":"")"><i class="icon icon-play"></i> @song.SongName <span class="float-right">@song.GetDurationString()</span></a>
                }
            </div>
        </div>
    </div>
    <audio id="audio-player" ontimeupdate="SeekBar()" ondurationchange="CreateSeekBar()" preload="auto" onended="EndofAudio()">
        <source src="@Url.Content(Model.CurrentlyPlayingSong.Path)" type="audio/mpeg">
    </audio>
}
else
{
    <div class="alert alert-danger">
        <strong>No Songs Found!</strong>
    </div>
}


@section scripts{
    @Scripts.Render("~/bundles/music-player")
}

